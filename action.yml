name: C/C++ Linter
description: Lint C/C++ code with clang-format and clang-tidy then post annotations, comments, and step summary with results.
author: shenxianpeng
branding:
  icon: "check-circle"
  color: "green"
inputs:
  thread-comments:
    description: >-
      Set this option to 'true' or 'false' to enable or disable the use of
      thread comments as feedback. Set this to 'update' to update an existing comment
      if one exists; the value 'true' will always delete an old comment and post a new one
      if necessary. Defaults to false.
    required: false
    default: 'false'
  no-lgtm:
    description: >-
      Set this option to true or false to enable or disable the use of a thread comment that
      basically says 'Looks Good To Me' (when all checks pass). Defaults to true.
      See `thread-comments` option for further details.
    required: false
    default: true
  step-summary:
    description: >
      Set this option to true to append content as part of workflow's job summary. Defaults to false.

      See implementation details in GitHub's documentation about
      [Adding a job summary](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary).
      This option is independent of the `thread-comments` option, rather this option uses the same content that
      the `thread-comments` option would use.
    required: false
    default: false
  file-annotations:
    description: Set this option to false to disable the use of file annotations as feedback. Defaults to true.
    required: false
    default: true
  style:
    description: >
      The style rules to use (defaults to 'llvm').
      Set this to 'file' to have clang-format use the closest relative .clang-format file.
    required: false
    default: "llvm"
  extensions:
    description: >
      The file extensions to run the action against.
      This comma-separated string defaults to 'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'.
    required: false
    default: "c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx"
  tidy-checks:
    description: >
      A string of regex-like patterns specifying what checks clang-tidy will use.
      This defaults to 'boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-*,cppcoreguidelines-*'. See also clang-tidy docs for more info.
    required: false
    default: "boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-*,cppcoreguidelines-*"
  repo-root:
    description: >
      The relative path to the repository root directory. The default value '.' is relative to the runner's GITHUB_WORKSPACE environment variable.
    required: false
    default: "."
  version:
    description: "The desired version of the clang tools to use. Accepted options are strings which can be 17, 16, 15, 14, 13, 12, 11, 10, 9, 8 or 7. Defaults to 12."
    required: false
    default: "12"
  verbosity:
    description: A hidden option to control the action's log verbosity. This is the `logging` level (defaults to `info`).
    required: false
    default: info
  lines-changed-only:
    description: Set this option to 'true' to only analyze changes in the event's diff. Defaults to 'false'.
    required: false
    default: false
  files-changed-only:
    description: Set this option to 'false' to analyze any source files in the repo. Defaults to 'true'.
    required: false
    default: true
  ignore:
    description: >
      Set this option with string of path(s) to ignore.

      - In the case of multiple paths, you can use a pipe character ('|')
        to separate the multiple paths. Multiple lines are forbidden as input to this option.
      - This can also have files, but the file's relative path has to be specified
        as well.
      - There is no need to use './' for each entry; a blank string ('') represents
        the repo-root path (specified by the `repo-root` input option).
      - Path(s) containing a space should be inside single quotes.
      - Submodules are automatically ignored.
      - Prefix a path with a bang (`!`) to make it explicitly not ignored - order of
        multiple paths does take precedence. The `!` prefix can be applied to
        submodules if desired.
      - Glob patterns are not supported here. All asterisk characters ('*') are literal.
    required: false
    default: ".github"
  database:
    description: The directory containing compile_commands.json file.
    required: false
    default: ""
  extra-args:
    description: A string of extra arguments passed to clang-tidy for use as compiler arguments. Multiple arguments are separated by spaces so the argument name and value should use an '=' sign instead of a space.
    required: false
    default: ""
  tidy-review:
    description: Set this to true to enable PR reviews from clang-tidy. See also https://cpp-linter.github.io/cpp-linter/pr_review_caveats.html
    required: false
    default: false
  format-review:
    description: Set this to true to enable PR reviews from clang-format.See also https://cpp-linter.github.io/cpp-linter/pr_review_caveats.html
    required: false
    default: false
outputs:
  checks-failed:
    description: An integer that can be used as a boolean value to indicate if any checks failed by clang-tidy and clang-format.
    value: ${{ steps.cpp-linter-unix.outputs.checks-failed || steps.cpp-linter-windows.outputs.checks-failed }}
  clang-tidy-checks-failed:
    description: An integer that can be used as a boolean value to indicate if any checks failed by clang-tidy only.
    value: ${{ steps.cpp-linter-unix.outputs.clang-tidy-checks-failed || steps.cpp-linter-windows.outputs.clang-tidy-checks-failed }}
  clang-format-checks-failed:
    description: An integer that can be used as a boolean value to indicate if any checks failed by clang-format only.
    value: ${{ steps.cpp-linter-unix.outputs.clang-format-checks-failed || steps.cpp-linter-windows.outputs.clang-format-checks-failed }}
runs:
  using: "composite"
  steps:
    - name: Install python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        # use python version shipped with latest Ubuntu LTS
        python-version: '3.10'
        update-environment: false

    - name: Install Linux clang dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        # First try installing from default Ubuntu repositories before trying LLVM script
        if ! sudo apt-get install -y clang-format-${{ inputs.version }} clang-tidy-${{ inputs.version }}; then
          # This LLVM script will add the relevant LLVM PPA: https://apt.llvm.org/
          wget https://apt.llvm.org/llvm.sh -O $GITHUB_ACTION_PATH/llvm_install.sh
          chmod +x $GITHUB_ACTION_PATH/llvm_install.sh
          if sudo $GITHUB_ACTION_PATH/llvm_install.sh ${{ inputs.version }}; then
            sudo apt-get install -y clang-format-${{ inputs.version }} clang-tidy-${{ inputs.version }}
          fi
        fi

    - name: Setup python venv (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      run: |
        ${{ steps.setup-python.outputs.python-path }} -m venv "$GITHUB_ACTION_PATH/venv"
        source "$GITHUB_ACTION_PATH/venv/bin/activate"
        pip install -r "$GITHUB_ACTION_PATH/requirements.txt"
        clang-tools -i ${{ inputs.version }} -b

    - name: Run cpp-linter (Unix)
      id: cpp-linter-unix
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      run: |
        source "$GITHUB_ACTION_PATH/venv/bin/activate"

        cpp-linter \
         --style="${{ inputs.style }}" \
         --extensions=${{ inputs.extensions }} \
         --tidy-checks="${{ inputs.tidy-checks }}" \
         --repo-root=${{ inputs.repo-root }} \
         --version=${{ inputs.version }} \
         --verbosity=${{ inputs.verbosity }} \
         --lines-changed-only=${{ inputs.lines-changed-only }} \
         --files-changed-only=${{ inputs.files-changed-only }} \
         --thread-comments=${{ inputs.thread-comments }} \
         --no-lgtm=${{ inputs.no-lgtm }} \
         --step-summary=${{ inputs.step-summary }} \
         --ignore="${{ inputs.ignore }}" \
         --database=${{ inputs.database }} \
         --file-annotations=${{ inputs.file-annotations }} \
         --extra-arg="${{ inputs.extra-args }}" \
         --tidy-review="${{ inputs.tidy-review }}" \
         --format-review="${{ inputs.format-review }}"

    - name: Setup python venv (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        ${{ steps.setup-python.outputs.python-path }} -m venv "$env:GITHUB_ACTION_PATH/venv"
        Invoke-Expression -Command "$env:GITHUB_ACTION_PATH/venv/Scripts/Activate.ps1"
        pip install -r "$env:GITHUB_ACTION_PATH/requirements.txt"
        clang-tools -i ${{ inputs.version }} -b

    - name: Run cpp-linter (Windows)
      id: cpp-linter-windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-Expression -Command "$env:GITHUB_ACTION_PATH/venv/Scripts/Activate.ps1"

        $app = 'cpp-linter' +
        ' --style="${{ inputs.style }}"' +
        ' --extensions=${{ inputs.extensions }}' +
        ' --tidy-checks="${{ inputs.tidy-checks }}"' +
        ' --repo-root=${{ inputs.repo-root }}' +
        ' --version=${{ inputs.version }}' +
        ' --verbosity=${{ inputs.verbosity }}' +
        ' --lines-changed-only=${{ inputs.lines-changed-only }}' +
        ' --files-changed-only=${{ inputs.files-changed-only }}' +
        ' --thread-comments=${{ inputs.thread-comments }}' +
        ' --no-lgtm=${{ inputs.no-lgtm }}' +
        ' --step-summary=${{ inputs.step-summary }}' +
        ' --ignore="${{ inputs.ignore }}"' +
        ' --database=${{ inputs.database }}' +
        ' --file-annotations=${{ inputs.file-annotations }}' +
        ' --extra-arg="${{ inputs.extra-args }}"' +
        ' --tidy-review="${{ inputs.tidy-review }}"' +
        ' --format-review="${{ inputs.format-review }}"'

        Invoke-Expression -Command $app
