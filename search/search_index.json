{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"C/C++ Linter Action <sub><sup>| clang-format &amp; clang-tidy</sup></sub>","text":"<p>A Github Action for linting C/C++ code integrating clang-tidy and clang-format to collect feedback provided in the form of <code>file-annotations</code>, <code>thread-comments</code>, workflow <code>step-summary</code>, and Pull Request reviews (with <code>tidy-review</code> or <code>format-review</code>).</p>"},{"location":"#usage","title":"Usage","text":"<p>Create a new GitHub Actions workflow in your project, e.g. at .github/workflows/cpp-linter.yml</p> <p>The content of the file should be in the following format.</p> <pre><code>    steps:\n      - uses: actions/checkout@v5\n      - uses: cpp-linter/cpp-linter-action@v2\n        id: linter\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          style: 'file'  # Use .clang-format config file\n          tidy-checks: '' # Use .clang-tidy config file\n          # only 'update' a single comment in a pull request thread.\n          thread-comments: ${{ github.event_name == 'pull_request' &amp;&amp; 'update' }}\n      - name: Fail fast?!\n        if: steps.linter.outputs.checks-failed &gt; 0\n        run: exit 1\n</code></pre> <p>For all explanations of our available input parameters and output variables, see our Inputs and Outputs document.</p> <p>See also our example recipes.</p>"},{"location":"#used-by","title":"Used By","text":"<p> Microsoft Apache NASA Samsung TheAlgorithms CachyOS Nextcloud Jupyter NNStreamer imgproxy Zondax AppNeta Chocolate Doom  and many more. </p>"},{"location":"#example","title":"Example","text":""},{"location":"#annotations","title":"Annotations","text":"<p>Using <code>file-annotations</code>:</p>"},{"location":"#clang-format-annotations","title":"clang-format annotations","text":""},{"location":"#clang-tidy-annotations","title":"clang-tidy annotations","text":""},{"location":"#thread-comment","title":"Thread Comment","text":"<p>Using <code>thread-comments</code>:</p> <p></p>"},{"location":"#step-summary","title":"Step Summary","text":"<p>Using <code>step-summary</code>:</p> <p></p>"},{"location":"#pull-request-review","title":"Pull Request Review","text":""},{"location":"#only-clang-tidy","title":"Only clang-tidy","text":"<p>Using <code>tidy-review</code>:</p> <p></p>"},{"location":"#only-clang-format","title":"Only clang-format","text":"<p>Using <code>format-review</code>:</p> <p></p> <p></p>"},{"location":"#add-cc-linter-action-badge-in-readme","title":"Add C/C++ Linter Action badge in README","text":"<p>You can show C/C++ Linter Action status with a badge in your repository README</p> <p>Example</p> <pre><code>[![cpp-linter](https://github.com/cpp-linter/cpp-linter-action/actions/workflows/cpp-linter.yml/badge.svg)](https://github.com/cpp-linter/cpp-linter-action/actions/workflows/cpp-linter.yml)\n</code></pre> <p></p>"},{"location":"#have-question-or-feedback","title":"Have question or feedback?","text":"<p>To provide feedback (requesting a feature or reporting a bug) please post to issues.</p>"},{"location":"#required-tools-installed","title":"Required tools installed","text":"<p>As of v2.16.0, this action uses</p> <ul> <li>nushell for cross-platform compatible scripting</li> <li>uv for driving a Python virtual environment</li> </ul> <p>This action installs nushell and uv automatically. Only nushell is added to the PATH environment variable. uv, and any standalone Python distribution it downloads, are not added to the PATH environment variable.</p>"},{"location":"#on-linux-runners","title":"On Linux runners","text":"<p>We only support Linux runners using a Debian-based Linux OS (like Ubuntu and many others). This is because we first try to use the <code>apt</code> package manager to install clang tools.</p> <p>Linux workflows that use a specific <code>container</code> should ensure that the following are installed:</p> <ul> <li>GLIBC (v2.32 or later)</li> <li><code>wget</code> or <code>curl</code></li> <li><code>lsb-release</code> (required by LLVM-provided install script)</li> <li><code>software-properties-common</code> (required by LLVM-provided install script)</li> <li><code>gnupg</code> (required by LLVM-provided install script)</li> </ul> <pre><code>apt-get update\napt-get install -y libc6 wget lsb-release software-properties-common gnupg\n</code></pre> <p>Otherwise, nushell and/or the LLVM-provided bash script will fail to run.</p>"},{"location":"#on-macos-runners","title":"On macOS runners","text":"<p>The specified <code>version</code> of <code>clang-format</code> and <code>clang-tidy</code> is installed via Homebrew. Failing that, we attempt to use static binaries that we built ourselves; see cpp-linter/clang-tools-pip and cpp-linter/clang-tools-static-binaries projects for more detail.</p>"},{"location":"#on-windows-runners","title":"On Windows runners","text":"<p>For Windows runners, we only use clang tools built as static binaries. See cpp-linter/clang-tools-pip and cpp-linter/clang-tools-static-binaries projects for more detail.</p>"},{"location":"#license","title":"License","text":"<p>The scripts and documentation in this project are released under the MIT License</p>"},{"location":"contributing-guidelines/","title":"Contributing","text":"<p>Thank you for investing your time in contributing to our project! We welcome feedback, bug reports, and pull requests!</p>"},{"location":"contributing-guidelines/#new-contributor-guide","title":"New contributor guide","text":"<p>Ours develop branch is <code>main</code> not <code>master</code> (<code>master</code> used to be the develop branch for v1.x).</p> <p>The reason we didn't delete the <code>master</code> branch is that there are still users whose workflows point to the <code>master</code> branch.</p> <p>For pull requests, please stick to the following guidelines</p> <ul> <li>Add tests for any new features and bug fixes.</li> <li>Put a reasonable amount of comments into the code.</li> <li>Fork cpp-linter-action on your GitHub user account, do your changes there and then create a PR against <code>main</code> branch of cpp-linter-action repository.</li> <li>Separate unrelated changes into multiple pull requests.</li> </ul> <p>If you wish to contribute to the python source package used by this action, then that has moved to it's own repository named cpp-linter as of v2 of this action.</p> <p>Please note that by contributing any code or documentation to this repository (by raising pull requests, or otherwise) you explicitly agree to the License Agreement.</p>"},{"location":"inputs-outputs/","title":"Inputs and Outputs","text":""},{"location":"inputs-outputs/#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>These are the action inputs and outputs offered by cpp-linter-action.</p>"},{"location":"inputs-outputs/#inputs","title":"Inputs","text":""},{"location":"inputs-outputs/#style","title":"<code>style</code>","text":"<p>1.2.0 Default<code>'llvm'</code></p> <p>The style rules to use.</p> <ul> <li>Set this to <code>file</code> to have clang-format use the closest relative .clang-format file.</li> <li>Set this to a blank string (<code>''</code>) to disable the use of clang-format entirely.</li> <li>Any code style supported by the specified version of clang-format.</li> </ul>"},{"location":"inputs-outputs/#extensions","title":"<code>extensions</code>","text":"<p>1.2.0 Default<code>'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'</code></p> <p>The file extensions to run the action against. This is a comma-separated string.</p>"},{"location":"inputs-outputs/#tidy-checks","title":"<code>tidy-checks</code>","text":"<p>1.2.0 Default<code>'boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-*,cppcoreguidelines-*'</code></p> <p>Comma-separated list of globs with optional <code>-</code> prefix. Globs are processed in order of appearance in the list. Globs without <code>-</code> prefix add checks with matching names to the set, globs with the <code>-</code> prefix remove checks with matching names from the set of enabled checks. This option's value is appended to the value of the 'Checks' option in a .clang-tidy file (if any).</p> <ul> <li>It is possible to disable clang-tidy entirely by setting this option to <code>'-*'</code>.</li> <li>It is also possible to rely solely on a .clang-tidy config file by specifying this option as a blank string (<code>''</code>).</li> </ul>"},{"location":"inputs-outputs/#repo-root","title":"<code>repo-root</code>","text":"<p>1.2.0 Default<code>'.'</code></p> <p>The relative path to the repository root directory. This path is relative to the path designated as the runner's <code>GITHUB_WORKSPACE</code> environment variable.</p>"},{"location":"inputs-outputs/#version","title":"<code>version</code>","text":"<p>1.2.0 Default<code>18</code></p> <p>The desired version of the clang-tools to use. Accepted options are strings which can be 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10 or 9.</p> <ul> <li>Set this option to a blank string (<code>''</code>) to use the platform's default installed version.</li> <li>This value can also be a path to where the clang tools are installed (if using a custom install location).</li> </ul>"},{"location":"inputs-outputs/#verbosity","title":"<code>verbosity</code>","text":"<p>1.3.0 Default<code>'info'</code></p> <p>This controls the action's verbosity in the workflow's logs. Supported options are <code>info</code> or <code>debug</code>. This option does not affect the verbosity of resulting thread comments or file annotations.</p> <p>The verbosity can also be engaged by enabling debug logs when re-running jobs or workflows.</p>"},{"location":"inputs-outputs/#lines-changed-only","title":"<code>lines-changed-only</code>","text":"<p>1.5.0 Default<code>false</code> <code>contents: read</code></p> <p>This controls what part of the files are analyzed. The following values are accepted:</p> <ul> <li><code>false</code>: All lines in a file are analyzed.</li> <li><code>true</code>: Only lines in the diff that contain additions are analyzed.</li> <li><code>diff</code>: All lines in the diff are analyzed (including unchanged lines but not subtractions).</li> </ul> <p>Important</p> <p>This feature requires special permissions to perform successfully. See our documented permissions</p>"},{"location":"inputs-outputs/#files-changed-only","title":"<code>files-changed-only</code>","text":"<p>1.3.0 Default<code>true</code> <code>contents: read</code></p> <p>Set this option to false to analyze any source files in the repo. This is automatically enabled if <code>lines-changed-only</code> is enabled.</p> <p>Important</p> <p>This feature requires special permissions to perform successfully. See our documented permissions</p>"},{"location":"inputs-outputs/#ignore","title":"<code>ignore</code>","text":"<p>1.3.0 Default<code>'.github'</code></p> <p>Set this option with string of path(s) to ignore.</p> <ul> <li>In the case of multiple paths, you can use a pipe character (<code>|</code>)   to separate the multiple paths. Multiple lines are forbidden as an input to this option;   it must be a single string.</li> <li>This can also have files, but the file's relative path has to be specified   as well.</li> <li>There is no need to use <code>./</code> for each entry; a blank string (<code>''</code>) represents   the <code>repo-root</code> path.</li> <li>Submodules are automatically ignored. Hidden directories (beginning with a <code>.</code>) are also ignored   automatically.</li> <li>Prefix a path with a bang (<code>!</code>) to make it explicitly not ignored. The order of   multiple paths does not take precedence. The <code>!</code> prefix can be applied to   a submodule's path (if desired) but not hidden directories.</li> <li>As of v2.12, glob patterns are supported here.   All asterisk characters (<code>*</code>) were previously literal.</li> </ul>"},{"location":"inputs-outputs/#ignore-tidy","title":"<code>ignore-tidy</code>","text":"<p>2.12.0 Default<code>'.github'</code></p> <p>Use this option to allow clang-tidy to ignore certain paths/files. See <code>ignore</code> for more details on possible values.</p>"},{"location":"inputs-outputs/#ignore-format","title":"<code>ignore-format</code>","text":"<p>2.12.0 Default<code>'.github'</code></p> <p>Use this option to allow clang-format to ignore certain paths/files. See <code>ignore</code> for more details on possible values.</p>"},{"location":"inputs-outputs/#thread-comments","title":"<code>thread-comments</code>","text":"<p>2.6.2 Default<code>'false'</code> <code>contents: write</code></p> <p>This controls the behavior of posted thread comments as feedback. The following options are supported:</p> <ul> <li><code>true</code>: enable the use of thread comments. This will always delete an outdated thread comment and post a new comment (triggering a notification for every comment).</li> <li><code>update</code>: update an existing thread comment if one already exists. This option does not trigger a new notification for every thread comment update.</li> <li><code>false</code>: disable the use of thread comments.</li> </ul> <p>Important</p> <p>This feature requires special permissions to perform successfully. See our documented permissions</p> <p>Note</p> <p>If run on a private repository, then this feature is disabled because the GitHub REST API behaves differently for thread comments on a private repository.</p>"},{"location":"inputs-outputs/#no-lgtm","title":"<code>no-lgtm</code>","text":"<p>2.6.2 Default<code>true</code></p> <p>Set this option to true or false to enable or disable the use of a thread comment or pull request review that basically says 'Looks Good To Me' (when all checks pass). The default value, <code>true</code> means no LGTM comment posted.</p> <p>See <code>thread-comments</code>, <code>tidy-review</code>, and <code>format-review</code> options for further details.</p>"},{"location":"inputs-outputs/#step-summary","title":"<code>step-summary</code>","text":"<p>2.6.0 Default<code>false</code></p> <p>Set this option to true to append content as part of workflow's job summary.</p> <p>See implementation details in GitHub's documentation about Adding a job summary. This option is independent of the <code>thread-comments</code> option, rather this option uses the same content that the <code>thread-comments</code> option would use.</p> <p>Note</p> <p>The <code>no-lgtm</code> option is not applied to step summaries.</p>"},{"location":"inputs-outputs/#file-annotations","title":"<code>file-annotations</code>","text":"<p>1.4.3 Default<code>true</code></p> <p>Set this option to false to disable the use of file annotations as feedback.</p>"},{"location":"inputs-outputs/#database","title":"<code>database</code>","text":"<p>1.4.0 Default<code>''</code></p> <p>The directory containing compilation database (like compile_commands.json) file.</p>"},{"location":"inputs-outputs/#extra-args","title":"<code>extra-args</code>","text":"<p>2.1.0 Default<code>''</code></p> <p>A string of extra arguments passed to clang-tidy for use as compiler arguments. Multiple arguments are separated by spaces so the argument name and value should use an <code>=</code> sign instead of a space.</p> <p>Example</p> <p><pre><code>extra-args: '-std=c++17 -Wall'\n</code></pre> This will be passed to clang-tidy as multiple <code>--extra-arg</code> options: <pre><code>clang-tidy --extra-arg=-std=c++17 --extra-arg=-Wall\n</code></pre></p>"},{"location":"inputs-outputs/#tidy-review","title":"<code>tidy-review</code>","text":"<p>2.9.0 Default<code>false</code> experimental <code>pull-requests: write</code></p> <p>Set this option to <code>true</code> to enable Pull Request reviews from clang-tidy.</p> <p>Important</p> <p>This feature requires special permissions to perform successfully. See our documented permissions.</p> <p>See also the PR review feature caveats.</p> <p>Note</p> <p>The <code>no-lgtm</code> option is applicable to Pull Request reviews.</p>"},{"location":"inputs-outputs/#format-review","title":"<code>format-review</code>","text":"<p>2.9.0 Default<code>false</code> <code>pull-requests: write</code></p> <p>Set this option to <code>true</code> to enable Pull Request reviews from clang-format.</p> <p>Important</p> <p>This feature requires special permissions to perform successfully. See our documented permissions.</p> <p>See also the PR review feature caveats.</p> <p>Note</p> <p>The <code>no-lgtm</code> option is applicable to Pull Request reviews.</p>"},{"location":"inputs-outputs/#passive-reviews","title":"<code>passive-reviews</code>","text":"<p>2.12.0 Default<code>false</code> <code>pull-requests: write</code></p> <p>Set this option to <code>true</code> to prevent Pull Request reviews from approving or requesting changes.</p>"},{"location":"inputs-outputs/#jobs","title":"<code>jobs</code>","text":"<p>2.11.0 Default<code>0</code></p> <p>The number of jobs to run in parallel. If less than or equal to 0, the number of jobs is set to use the number of all available CPU cores.</p>"},{"location":"inputs-outputs/#cache-enable","title":"<code>cache-enable</code>","text":"<p>2.16.0 Default<code>true</code></p> <p>Controls the caching of cpp-linter dependencies. The installed <code>clang-format</code> and <code>clang-tidy</code> tools are not cached.</p> <p>By default, this is enabled. Any cached assets are kept within the path to this action's source (not in the runner's workspace or temp directory).</p>"},{"location":"inputs-outputs/#outputs","title":"Outputs","text":"<p>This action creates 3 output variables. Even if the linting checks fail for source files this action will still pass, but users' CI workflows can use this action's outputs to exit the workflow early if that is desired.</p>"},{"location":"inputs-outputs/#checks-failed","title":"<code>checks-failed</code>","text":"<p>1.2.0</p> <p>An integer that can be used as a boolean value to indicate if any checks failed by clang-tidy and clang-format.</p>"},{"location":"inputs-outputs/#clang-tidy-checks-failed","title":"<code>clang-tidy-checks-failed</code>","text":"<p>2.7.2</p> <p>An integer that can be used as a boolean value to indicate if any checks failed by clang-tidy only.</p>"},{"location":"inputs-outputs/#clang-format-checks-failed","title":"<code>clang-format-checks-failed</code>","text":"<p>2.7.2</p> <p>An integer that can be used as a boolean value to indicate if any checks failed by clang-format only.</p>"},{"location":"permissions/","title":"Token Permissions","text":"<p>This is an exhaustive list of required permissions organized by features.</p> <p>Important</p> <p>The <code>GITHUB_TOKEN</code> environment variable should be supplied when running on a private repository. Otherwise the runner does not not have the privileges needed for the features mentioned here.</p> <p>See also Authenticating with the <code>GITHUB_TOKEN</code></p>"},{"location":"permissions/#file-changes","title":"File Changes","text":"<p>When using <code>files-changed-only</code> or <code>lines-changed-only</code> to get the list of file changes for a CI event, the following permissions are needed:</p> <code>on: push</code><code>on: pull_request</code> <p>For push events</p> <pre><code>    permissions:\n      contents: read # (1)!\n</code></pre> <ol> <li>This permission is also needed to download files if the repository is not    checked out before running cpp-linter.</li> </ol> <p>For pull_request events</p> <pre><code>    permissions:\n      contents: read # (1)!\n      pull-requests: read # (2)!\n</code></pre> <ol> <li>For pull requests, this permission is only needed to download files if    the repository is not checked out before running cpp-linter.</li> <li> <p>Specifying <code>write</code> is also sufficient as that is required for</p> <ul> <li>posting thread comments on pull requests</li> <li>posting pull request reviews</li> </ul> </li> </ol>"},{"location":"permissions/#thread-comments","title":"Thread Comments","text":"<p>The <code>thread-comments</code> feature requires the following permissions:</p> <code>on: push</code><code>on: pull_request</code> <p>For push events</p> <pre><code>    permissions:\n      metadata: read # (1)!\n      contents: write # (2)!\n</code></pre> <ol> <li>needed to fetch existing comments</li> <li>needed to post or update a commit comment. This also allows us to delete    an outdated comment if needed.</li> </ol> <p>For pull_request events</p> <pre><code>    permissions:\n      pull-requests: write\n</code></pre>"},{"location":"permissions/#pull-request-reviews","title":"Pull Request Reviews","text":"<p>The <code>tidy-review</code>, <code>format-review</code>, and <code>passive-reviews</code> features require the following permissions:</p> <pre><code>    permissions:\n      pull-requests: write\n</code></pre>"},{"location":"pr-review-caveats/","title":"Pull Request Review Caveats","text":"<p>Abstract</p> <p>This information is specific to GitHub Pull Requests (often abbreviated as \"PR\").</p> <p>While the Pull Request review feature has been diligently tested, there are still some caveats to beware of when using Pull Request reviews.</p>"},{"location":"pr-review-caveats/#bot-permissions-required","title":"Bot Permissions required","text":"<p>The \"GitHub Actions\" bot may need to be allowed to approve Pull Requests. By default, the bot cannot approve Pull Request changes, only request more changes. This will show as a warning in the workflow logs if the given token (set to the environment variable <code>GITHUB_TOKEN</code>) isn't configured with the proper permissions.</p> <p>See also</p> <p>Refer to the GitHub documentation for repository settings or organization settings about adjusting the required permissions for GitHub Actions's <code>secrets.GITHUB_TOKEN</code>.</p> <p>See our documented permissions.</p>"},{"location":"pr-review-caveats/#auto-disabled-for-certain-event-types","title":"Auto-disabled for certain event types","text":"<p>The feature is auto-disabled for</p> <ul> <li>closed Pull Requests</li> <li>Pull Requests marked as \"draft\"</li> <li>push events</li> </ul>"},{"location":"pr-review-caveats/#posts-a-new-review-on-each-run","title":"Posts a new review on each run","text":"<p>Clang-tidy and clang-format suggestions are shown in 1 Pull Request review.</p> <ul> <li>Users are encouraged to choose either <code>tidy-review</code> or <code>format-review</code>.   Enabling both will likely show duplicate or similar suggestions.   Remember, clang-tidy can be configured to use the same <code>style</code> that clang-format accepts.   There is no current implementation to combine suggestions from both tools (clang-tidy kind of   does that anyway).</li> <li>Each generated review is specific to the commit that triggered the Continuous Integration   workflow.</li> <li>Outdated reviews are dismissed but not marked as resolved.   Also, the outdated review's summary comment is not automatically hidden.   To reduce the Pull Request's thread noise, users interaction is required.</li> </ul> <p>See also</p> <p>Refer to GitHub's documentation about hiding a comment. Hiding a Pull Request review's summary comment will not resolve the suggestions in the diff. Please also refer to resolve a conversion to collapse outdated or duplicate suggestions in the diff.</p> <p>GitHub REST API does not provide a way to hide comments or mark review suggestions as resolved.</p> <p>Tip</p> <p>We do support an environment variable named <code>CPP_LINTER_PR_REVIEW_SUMMARY_ONLY</code>. If the variable is set to <code>true</code>, then the review only contains a summary comment with no suggestions posted in the diff.</p>"},{"location":"pr-review-caveats/#probable-non-exhaustive-reviews","title":"Probable non-exhaustive reviews","text":"<p>If any suggestions did not fit within the Pull Request diff, then the review's summary comment will indicate how many suggestions were left out. The full patch of suggestions is always included as a collapsed code block in the review summary comment. This isn't a problem we can fix. GitHub won't allow review comments/suggestions to target lines that are not shown in the Pull Request diff (the summation of file differences in a Pull Request).</p> <ul> <li>Users are encouraged to set <code>lines-changed-only</code> to <code>true</code>.   This will help us keep the suggestions limited to lines that are shown within the Pull   Request diff.   However, there are still some cases where clang-format or clang-tidy will apply fixes to lines   that are not within the diff.   This can't be avoided because the <code>--line-filter</code> passed to the clang-tidy (and <code>--lines</code>   passed to clang-format) only applies to analysis, not fixes.</li> <li>Not every diagnostic from clang-tidy can be automatically fixed.   Some diagnostics require user interaction/decision to properly address.</li> <li>Some fixes provided might depend on what compiler is used.   We have made it so clang-tidy takes advantage of any fixes provided by the compiler.   Compilation errors may still prevent clang-tidy from reporting all concerns.</li> </ul>"},{"location":"examples/","title":"Recipes","text":"<p>Here are some example workflows to get started quickly.</p> only clang-tidyonly clang-formatonly PR comments <pre><code>name: cpp-linter\non:\n  pull_request:\n    branches: [main, master, develop]\n    paths: ['**.c', '**.cpp', '**.h', '**.hpp', '**.cxx', '**.hxx', '**.cc', '**.hh', '**CMakeLists.txt', 'meson.build', '**.cmake']\n  push:\n    branches: [main, master, develop]\n    paths: ['**.c', '**.cpp', '**.h', '**.hpp', '**.cxx', '**.hxx', '**.cc', '**.hh', '**CMakeLists.txt', 'meson.build', '**.cmake']\n\njobs:\n  cpp-linter:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v5\n\n      # ... optionally setup build env to create a compilation database\n\n      - uses: cpp-linter/cpp-linter-action@v2\n        id: linter\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          style: ''  # disable clang-format checks. (1)\n          tidy-checks: '' # Use .clang-tidy config file. (2)\n\n      - name: Fail fast?!\n        if: steps.linter.outputs.clang-tidy-checks-failed &gt; 0\n        run: exit 1\n</code></pre> <ol> <li>See also <code>style</code></li> <li>See also <code>tidy-checks</code></li> </ol> <pre><code>name: cpp-linter\non:\n  pull_request:\n    branches: [main, master, develop]\n    paths: ['**.c', '**.cpp', '**.h', '**.hpp', '**.cxx', '**.hxx', '**.cc', '**.hh', '**CMakeLists.txt', 'meson.build', '**.cmake']\n  push:\n    branches: [main, master, develop]\n    paths: ['**.c', '**.cpp', '**.h', '**.hpp', '**.cxx', '**.hxx', '**.cc', '**.hh', '**CMakeLists.txt', 'meson.build', '**.cmake']\n\njobs:\n  cpp-linter:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v5\n\n      # ... optionally setup build env to create a compilation database\n\n      - uses: cpp-linter/cpp-linter-action@v2\n        id: linter\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          style: 'file'  # Use .clang-format config file. (1)\n          tidy-checks: '-*' # disable clang-tidy checks. (2)\n\n      - name: Fail fast?!\n        if: steps.linter.outputs.clang-format-checks-failed &gt; 0\n        run: exit 1\n</code></pre> <ol> <li>See also <code>style</code></li> <li>See also <code>tidy-checks</code></li> </ol> <pre><code>name: cpp-linter\non:\n  pull_request:\n    branches: [main, master, develop]\n    paths: ['**.c', '**.cpp', '**.h', '**.hpp', '**.cxx', '**.hxx', '**.cc', '**.hh', '**CMakeLists.txt', 'meson.build', '**.cmake']\n  push:\n    branches: [main, master, develop]\n    paths: ['**.c', '**.cpp', '**.h', '**.hpp', '**.cxx', '**.hxx', '**.cc', '**.hh', '**CMakeLists.txt', 'meson.build', '**.cmake']\n\njobs:\n  cpp-linter:\n    runs-on: ubuntu-latest\n    permissions: # (1)!\n      pull-requests: write\n    steps:\n      - uses: actions/checkout@v5\n\n      # ... optionally setup build env to create a compilation database\n\n      - uses: cpp-linter/cpp-linter-action@v2\n        id: linter\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          style: 'file'  # Use .clang-format config file. (2)\n          tidy-checks: '' # Use .clang-tidy config file. (3)\n          # only 'update' a single comment in a pull request's thread. (4)\n          thread-comments: ${{ github.event_name == 'pull_request' &amp;&amp; 'update' }}\n\n      - name: Fail fast?!\n        if: steps.linter.outputs.checks-failed &gt; 0\n        run: exit 1\n</code></pre> <ol> <li>See also our token permissions document</li> <li>See also <code>style</code></li> <li>See also <code>tidy-checks</code></li> <li>See also <code>thread-comments</code></li> </ol>"}]}